@page "/talent-pool"
@rendermode InteractiveAuto
@using HouYi.Models.Resumes
@using HouYi.Services
@inject IResumeService ResumeService

<h3>人才库</h3>
<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>姓名</th>
                <th>性别</th>
                <th>年龄</th>
                <th>电话</th>
                <th>邮箱</th>
                <th>当前状态</th>
                <th>职位</th>
                <th>学历</th>
                <th>年薪(K)</th>
                <th>城市代码</th>
                <th>来源</th>
                <th>备注</th>
                <th>更新时间</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resume in Resumes)
            {
                <tr>
                    <td><EditableCell T="string" Value="@resume.Name" Width="50px" OnValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.Name), v))" /></td>
                    <td>
                        <EnumDropdown TEnum="Gender" Value="@resume.Gender" ValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.Gender), v))" />
                    </td>
                    <td><EditableCell T="int" Value="@resume.Age" Width="50px" OnValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.Age), v))" /></td>
                    <td><EditableCell T="string" Value="@resume.Phone" Width="120px" OnValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.Phone), v))" /></td>
                    <td><EditableCell T="string" Value="@resume.Email" Width="160px" OnValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.Email), v))" /></td>
                    <td>
                        <EnumDropdown TEnum="CurrentStatus" Value="@resume.CurrentStatus"
                        ValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.CurrentStatus), v))" />
                    </td>
                    <td><EditableCell T="string" Value="@resume.Position" Width="150px" OnValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.Position), v))" /></td>
                    <td>
                        <EnumDropdown TEnum="Degree" Value="@resume.Degree" 
                        ValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.Degree), v))" />
                    </td>
                    <td><EditableCell T="int" Value="@resume.AnnualSalary" Width="50px" OnValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.AnnualSalary), v))" /></td>
                    <td><EditableCell T="short" Value="@resume.City" Width="80px" OnValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.City), v))" /></td>
                    <td><EditableCell T="byte" Value="@resume.Source" Width="60px" OnValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.Source), v))" /></td>
                    <td><EditableCell T="string" Value="@resume.Note" Width="240px" 
                        IsMultiline="true"
                        OnValueChanged="@(v => UpdateProperty(resume.Id, nameof(Resume.Note), v))" /></td>
                    <td>
                        <div class="tooltip-container">
                            @resume.UpdatedAt.ToRelativeTimeString()
                            <span class="custom-tooltip">
                                更新于: @resume.UpdatedAt.ToString("yyyy-MM-dd HH:mm")<br />
                                创建于: @resume.CreatedAt.ToString("yyyy-MM-dd HH:mm")
                            </span>
                        </div>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => OnCommunicate(resume)">沟通</button>
                        <button class="btn btn-sm btn-info" @onclick="() => OnViewHistory(resume)">沟通记录</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteResume(resume.Id)">删除</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="d-flex justify-content-between align-items-center">
    <div>
        <select class="form-select" @bind="PageSize" @bind:event="onchange">
            <option value="10">10条/页</option>
            <option value="20">20条/页</option>
            <option value="50">50条/页</option>
        </select>
    </div>
    <nav>
        <ul class="pagination">
            <li class="page-item @(CurrentPage == 0 ? "disabled" : "")">
                <button class="page-link" @onclick="async () => await NavigateToPage(0)" disabled="@(CurrentPage == 0)">
                    首页
                </button>
            </li>
            <li class="page-item @(CurrentPage == 0 ? "disabled" : "")">
                <button class="page-link" @onclick="async () => await NavigateToPage(CurrentPage - 1)" disabled="@(CurrentPage == 0)">
                    上一页
                </button>
            </li>

            @{
                const int maxVisiblePages = 5;
                int startPage = Math.Max(0, CurrentPage - maxVisiblePages / 2);
                int endPage = Math.Min(TotalPages - 1, startPage + maxVisiblePages - 1);

                if (endPage - startPage + 1 < maxVisiblePages)
                {
                    startPage = Math.Max(0, endPage - maxVisiblePages + 1);
                }

                for (int i = startPage; i <= endPage; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(pageNumber == CurrentPage ? "active" : "")">
                        <button class="page-link" @onclick="async () => await NavigateToPage(pageNumber)">
                            @(pageNumber + 1)
                        </button>
                    </li>
                }
            }

            <li class="page-item @(CurrentPage >= TotalPages - 1 ? "disabled" : "")">
                <button class="page-link" @onclick="async () => await NavigateToPage(CurrentPage + 1)" 
                disabled="@(CurrentPage >= TotalPages - 1)">
                    下一页
                </button>
            </li>
            <li class="page-item @(CurrentPage >= TotalPages - 1 ? "disabled" : "")">
                <button class="page-link" @onclick="async () => await NavigateToPage(TotalPages - 1)" 
                disabled="@(CurrentPage >= TotalPages - 1)">
                    末页
                </button>
            </li>
        </ul>
    </nav>
</div>

@code {

    private List<Resume> Resumes = new();
    private int TotalCount;
    private int CurrentPage;
    private int pageSize = 10;

    private int PageSize
    {
        get => pageSize;
        set
        {
            if (pageSize != value)
            {
                pageSize = value;
                InvokeAsync(async () =>
                {
                    await NavigateToPage(0);
                    StateHasChanged();
                });
            }
        }
    }

    private int TotalPages => (int)Math.Ceiling(TotalCount / (double)PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try 
        {
            var result = await ResumeService.GetResumesAsync(CurrentPage, PageSize);
            Resumes = new List<Resume>(result.Items);
            TotalCount = result.TotalCount;
            StateHasChanged();
        }
        catch
        {
            Resumes = new List<Resume>();
            TotalCount = 0;
            StateHasChanged();
        }
    }

    private async Task NavigateToPage(int page)
    {

        Console.WriteLine("Hit " + page);
        if (page < 0 || page >= TotalPages)
            return;

        CurrentPage = page;
        await LoadData();
        StateHasChanged();
    }

    private async Task UpdateProperty<T>(string id, string propertyName, T value)
    {
        var success = await ResumeService.UpdateResumePropertyAsync(id, propertyName, value);
        if (success)
        {
            var resume = Resumes.First(r => r.Id == id);
            var property = typeof(Resume).GetProperty(propertyName);
            if (property != null)
            {
                var targetType = property.PropertyType;
                var convertedValue = Convert.ChangeType(value, targetType);
                property.SetValue(resume, convertedValue);
            }
            resume.UpdatedAt = DateTime.Now;
            StateHasChanged();
        }
    }

    private async Task DeleteResume(string id)
    {
        if (await ResumeService.DeleteResumeAsync(id))
        {
            Resumes.RemoveAll(r => r.Id == id);
            TotalCount--;
            if (Resumes.Count == 0 && CurrentPage > 0)
            {
                await NavigateToPage(CurrentPage - 1);
            }
            else
            {
                StateHasChanged();
            }
        }
    }

    private Task OnCommunicate(Resume resume)
    {
        // To be implemented
        return Task.FromResult(0);
    }

    private void OnViewHistory(Resume resume)
    {
        // To be implemented
    }
}
