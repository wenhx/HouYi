@attribute [Authorize]
@inject IUserService UserService

<div class="container-fluid">
    <div class="p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>用户管理</h1>
        </div>

        <!-- 搜索 -->
        <div class="row mb-4">
            <div class="col-md-8">
                <form class="search-form" @onsubmit="SearchUsers" @onsubmit:preventDefault>
                    <div class="d-flex">
                        <input type="search" class="form-control" placeholder="搜索用户名、邮箱或电话..." aria-label="搜索" @bind="_searchTerm" @bind:event="oninput">
                        <button class="btn btn-primary btn-search" type="submit">
                            <i class="bi bi-search me-1"></i>搜索
                        </button>
                        @if (_isSearchMode && !string.IsNullOrEmpty(_searchTerm))
                        {
                            <button class="btn btn-outline-secondary ms-2" @onclick:preventDefault @onclick="ClearSearch" style="min-width: 100px;">
                                <i class="bi bi-x-circle me-1"></i>清除
                            </button>
                        }
                    </div>
                </form>
            </div>
        </div>

        <!-- 用户列表 -->
        <div class="card">
            <div class="card-body">
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @_errorMessage
                        <button type="button" class="btn-close" @onclick="ClearErrorMessage"></button>
                    </div>
                }
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>用户名</th>
                                <th>角色</th>
                                <th>邮箱</th>
                                <th>邮箱确认</th>
                                <th>电话</th>
                                <th>电话确认</th>
                                <th>登录失败次数</th>
                                <th>创建时间</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (_pagedUsers == null)
                            {
                                <tr>
                                    <td colspan="9" class="text-center">加载中...</td>
                                </tr>
                            }
                            else if (!_pagedUsers.Items.Any())
                            {
                                <tr>
                                    <td colspan="9" class="text-center">没有用户数据</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var user in _pagedUsers.Items)
                                {
                                    <tr>
                                        <td>@user.UserName</td>
                                        <td>@(_userRoles.ContainsKey(user.Id) ? _userRoles[user.Id] : "加载中...")</td>
                                        <td>@user.Email</td>
                                        <td>
                                            @if (user.EmailConfirmed)
                                            {
                                                <span class="badge bg-success">已确认</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning">未确认</span>
                                            }
                                        </td>
                                        <td>@user.PhoneNumber</td>
                                        <td>
                                            @if (user.PhoneNumberConfirmed)
                                            {
                                                <span class="badge bg-success">已确认</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning">未确认</span>
                                            }
                                        </td>
                                        <td>@user.AccessFailedCount</td>
                                        <td>@user.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                        <td>
                                            <div class="btn-group">
                                                <button type="button" title="查看详情" class="btn btn-sm btn-outline-primary btn-view btn-operation" @onclick="() => ShowUserDetails(user)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button type="button" title="编辑" class="btn btn-sm btn-outline-success btn-edit btn-operation" @onclick="() => ShowEditModal(user)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button type="button" title="删除" class="btn btn-sm btn-outline-danger btn-delete btn-operation" @onclick="() => ShowDeleteModal(user)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <!-- 分页 -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="d-flex align-items-center">
                        <span class="me-2">每页显示：</span>
                        <select class="form-select me-2" @onchange="PageSizeChanged" style="width: 70px;">
                            <option value="10" selected="@(_pageSize == 10)">10</option>
                            <option value="20" selected="@(_pageSize == 20)">20</option>
                            <option value="50" selected="@(_pageSize == 50)">50</option>
                        </select>
                        @if (_pagedUsers != null)
                        {
                            <span class="pagination-info">
                                显示 @((_pagedUsers.PageNumber - 1) * _pagedUsers.PageSize + 1)-@(Math.Min(_pagedUsers.PageNumber * _pagedUsers.PageSize, _pagedUsers.TotalCount)) 条，
                                共 @_pagedUsers.TotalCount 条记录
                            </span>
                        }
                    </div>
                    @if (_pagedUsers != null && _pagedUsers.TotalPages > 0)
                    {
                        <ul class="pagination mb-0">
                            <li class="page-item @(_pagedUsers.PageNumber == 1 ? "disabled" : "")">
                                <a class="page-link" href="javascript:void(0)" @onclick="() => NavigateToPage(1)">首页</a>
                            </li>
                            <li class="page-item @(!_pagedUsers.HasPreviousPage ? "disabled" : "")">
                                <a class="page-link" href="javascript:void(0)" @onclick="() => NavigateToPage(_pagedUsers.PageNumber - 1)">上一页</a>
                            </li>

                            @{
                                int startPage = Math.Max(1, _pagedUsers.PageNumber - 2);
                                int endPage = Math.Min(_pagedUsers.TotalPages, startPage + 4);

                                if (endPage - startPage < 4 && startPage > 1)
                                {
                                    startPage = Math.Max(1, endPage - 4);
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                int pageNumber = i;
                                <li class="page-item @(pageNumber == _pagedUsers.PageNumber ? "active" : "")">
                                    <a class="page-link" href="javascript:void(0)" @onclick="() => NavigateToPage(pageNumber)">@pageNumber</a>
                                </li>
                            }

                            <li class="page-item @(!_pagedUsers.HasNextPage ? "disabled" : "")">
                                <a class="page-link" href="javascript:void(0)" @onclick="() => NavigateToPage(_pagedUsers.PageNumber + 1)">下一页</a>
                            </li>
                            <li class="page-item @(_pagedUsers.PageNumber == _pagedUsers.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="javascript:void(0)" @onclick="() => NavigateToPage(_pagedUsers.TotalPages)">末页</a>
                            </li>
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 用户详情模态框 -->
@if (_showViewModal)
{
    <div class="modal fade show" style="display: block; padding-right: 17px;" id="viewModal" tabindex="-1" aria-labelledby="viewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewModalLabel">用户详情</h5>
                    <button type="button" class="btn-close" @onclick="CloseViewModal"></button>
                </div>
                <div class="modal-body">
                    @if (_selectedUser != null)
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">用户名</label>
                                <p>@_selectedUser.UserName</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">角色</label>
                                <p>@(_userRoles.ContainsKey(_selectedUser.Id) ? _userRoles[_selectedUser.Id] : "加载中...")</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">邮箱</label>
                                <p>@_selectedUser.Email</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">邮箱确认</label>
                                <p>
                                    @if (_selectedUser.EmailConfirmed)
                                    {
                                        <span class="badge bg-success">已确认</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">未确认</span>
                                    }
                                </p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">电话</label>
                                <p>@_selectedUser.PhoneNumber</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">电话确认</label>
                                <p>
                                    @if (_selectedUser.PhoneNumberConfirmed)
                                    {
                                        <span class="badge bg-success">已确认</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">未确认</span>
                                    }
                                </p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">ID</label>
                                <p>@_selectedUser.Id</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">创建时间</label>
                                <p>@_selectedUser.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">登录失败次数</label>
                                <p>@_selectedUser.AccessFailedCount</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">更新时间</label>
                                <p>@_selectedUser.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">锁定状态</label>
                                <p>
                                    @if (_selectedUser.LockoutEnabled)
                                    {
                                        if (_selectedUser.LockoutEnd.HasValue && _selectedUser.LockoutEnd.Value > DateTimeOffset.Now)
                                        {
                                            <span class="badge bg-danger">已锁定 (到 @_selectedUser.LockoutEnd.Value.LocalDateTime.ToString("yyyy-MM-dd HH:mm:ss"))</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">未锁定</span>
                                        }
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">未启用锁定</span>
                                    }
                                </p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">锁定时间</label>
                                <p>@_selectedUser.LockoutEnd?.LocalDateTime.ToString("yyyy-MM-dd HH:mm:ss")</p>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseViewModal">关闭</button>
                    <button type="button" class="btn btn-primary" @onclick="SwitchToEditMode">编辑</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<DeleteConfirmationModal ShowModal="@_showDeleteModal" ItemName="@_selectedUserName" OnConfirm="@HandleDeleteConfirmation" />

<!-- 编辑用户模态框 -->
<UserEditForm ModalId="editModal" ModalTitle="@($"编辑用户 - {_editUser?.UserName ?? "未知"}")" User="@_editUser"
              OnCancel="CloseEditModal" OnValidSubmit="UpdateUser" ShowModal="@(_editUser != null)" />

@code {
    private PagedResult<HouYiUser>? _pagedUsers;
    private string? _errorMessage;
    private int _currentPage = 1;
    private int _pageSize = 10;
    private Dictionary<int, string> _userRoles = new Dictionary<int, string>();
    private bool _showViewModal;
    private HouYiUser? _selectedUser;
    private bool _showDeleteModal;
    private string? _selectedUserName;
    private int? _userIdToDelete;
    private HouYiUser? _editUser;
    private string _searchTerm = "";
    private bool _isSearchMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
        await LoadUserRolesAsync();
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            if (_isSearchMode && !string.IsNullOrWhiteSpace(_searchTerm))
            {
                Console.WriteLine($"开始搜索：{_searchTerm}。");
                _pagedUsers = await UserService.FindUsersAsync(_searchTerm, _currentPage, _pageSize);
            }
            else
            {
                Console.WriteLine($"开始加载列表数据。");
                _pagedUsers = await UserService.GetUsersAsync(_currentPage, _pageSize);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"加载用户数据时发生错误: {ex.Message}";
            Console.WriteLine(_errorMessage);
        }
    }

    private async Task LoadUserRolesAsync()
    {
        if (_pagedUsers?.Items != null)
        {
            foreach (var user in _pagedUsers.Items)
            {
                var roles = await UserService.GetUserRolesAsync(user);
                if (roles != null && roles.Any())
                {
                    _userRoles[user.Id] = string.Join(", ", roles);
                }
                else
                {
                    _userRoles[user.Id] = string.Empty;
                }
            }
        }
    }

    private async Task NavigateToPage(int page)
    {
        _currentPage = page;
        await LoadUsersAsync();
    }

    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            _pageSize = newPageSize;
            _currentPage = 1;
            await LoadUsersAsync();
        }
    }

    private void ClearErrorMessage()
    {
        _errorMessage = null;
    }

    private void ShowUserDetails(HouYiUser user)
    {
        _selectedUser = user;
        _showViewModal = true;
        StateHasChanged();
    }

    private void CloseViewModal()
    {
        _showViewModal = false;
        _selectedUser = null;
        StateHasChanged();
    }

    private void ShowDeleteModal(HouYiUser user)
    {
        _userIdToDelete = user.Id;
        _selectedUserName = user.UserName;
        _showDeleteModal = true;
    }

    private async Task HandleDeleteConfirmation(bool confirmed)
    {
        if (confirmed && _userIdToDelete.HasValue)
        {
            try
            {
                await UserService.DeleteUserAsync(_userIdToDelete.Value);
                await LoadUsersAsync();
            }
            catch (Exception ex)
            {
                _errorMessage = $"删除用户时发生错误: {ex.Message}";
                Console.WriteLine(_errorMessage);
            }
        }
        _showDeleteModal = false;
        _userIdToDelete = null;
        _selectedUserName = null;
    }

    private void ShowEditModal(HouYiUser user)
    {
        _editUser = new HouYiUser
            {
                Id = user.Id,
                UserName = user.UserName,
                Email = user.Email,
                PhoneNumber = user.PhoneNumber,
                LockoutEnabled = user.LockoutEnabled
            };
        StateHasChanged();
    }

    private void CloseEditModal()
    {
        _editUser = null;
        StateHasChanged();
    }

    private async Task UpdateUser(string userRole)
    {
        if (_editUser != null)
        {
            try
            {
                await UserService.UpdateUserAsync(_editUser, userRole);
                await LoadUsersAsync();
                CloseEditModal();
            }
            catch (Exception ex)
            {
                _errorMessage = $"更新用户信息时发生错误: {ex.Message}";
                Console.WriteLine(_errorMessage);
            }
        }
    }

    private void SwitchToEditMode()
    {
        if (_selectedUser != null)
        {
            _editUser = new HouYiUser
                {
                    Id = _selectedUser.Id,
                    UserName = _selectedUser.UserName,
                    Email = _selectedUser.Email,
                    PhoneNumber = _selectedUser.PhoneNumber,
                    LockoutEnabled = _selectedUser.LockoutEnabled
                };
            _showViewModal = false;
            StateHasChanged();
        }
    }

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            await ClearSearch();
            return;
        }

        _isSearchMode = true;
        _currentPage = 1; // 搜索时重置到第一页
        await LoadUsersAsync();
    }

    private async Task ClearSearch()
    {
        _searchTerm = "";
        _isSearchMode = false;
        _currentPage = 1;
        await LoadUsersAsync();
    }
}
