@page "/"
@using System
@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components
@using HouYi.Data
@attribute [Authorize]
@inject UserManager<HouYiUser> UserManager
@inject SignInManager<HouYiUser> SignInManager
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<div class="container-fluid">
    <div class="row">
        <!-- 侧边导航栏 -->
        <div class="col-md-auto bg-dark text-white sidebar sidebar-custom min-vh-100 py-3">
            <h2 class="text-center mb-4">HouYi</h2>
            <div class="d-flex flex-column align-items-center mb-4">
                <a href="/account/manage/" target="_blank" class="text-decoration-none text-white">
                    <UserAvatar UserName="@_currentUserName" Size="md" />
                    <h5 class="text-center mt-2">@(_currentUserName ?? "用户")</h5>
                </a>
            </div>
            <ul class="nav flex-column">
                <li class="nav-item mb-2">
                    <a class="nav-link @(_currentPage == nameof(Dashboard) ? "active" : "") text-white" href="#" @onclick='() => ChangePage(nameof(Dashboard), "数据看板")'>
                        <i class="bi bi-speedometer2 me-2"></i> 数据看板
                    </a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link @(_currentPage == nameof(Resumes) ? "active" : "") text-white" href="#" @onclick='() => ChangePage(nameof(Resumes), "人才库")'>
                        <i class="bi bi-file-earmark-person me-2"></i> 人才库
                    </a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link @(_currentPage == nameof(Communications) ? "active" : "") text-white" href="#" @onclick='() => ChangePage(nameof(Communications), "沟通管理")'>
                        <i class="bi bi-chat-dots me-2"></i> 沟通管理
                    </a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link @(_currentPage == nameof(Recommendations) ? "active" : "") text-white" href="#" @onclick='() => ChangePage(nameof(Recommendations), "人才推荐")'>
                        <i class="bi bi-person-plus me-2"></i> 人才推荐
                    </a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link @(_currentPage == nameof(Interviews) ? "active" : "") text-white" href="#" @onclick='() => ChangePage(nameof(Interviews), "面试记录")'>
                        <i class="bi bi-calendar-event me-2"></i> 面试管理
                    </a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link @(_currentPage == nameof(Position) ? "active" : "") text-white" href="#" @onclick='() => ChangePage(nameof(Positions), "职位管理")'>
                        <i class="bi bi-briefcase me-2"></i> 职位管理
                    </a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link @(_currentPage == nameof(Statistics) ? "active" : "") text-white" href="#" @onclick='() => ChangePage(nameof(Statistics), "统计分析")'>
                        <i class="bi bi-graph-up me-2"></i> 统计分析
                    </a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link @(_currentPage == nameof(Customers) ? "active" : "") text-white" href="#" @onclick='() => ChangePage(nameof(Customers), "客户管理")'>
                        <i class="bi bi-building me-2"></i> 客户管理
                    </a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link @(_currentPage == nameof(Users) ? "active" : "") text-white" href="#" @onclick='() => ChangePage(nameof(Users), "用户管理")'>
                        <i class="bi bi-people me-2"></i> 用户管理
                    </a>
                </li>
                <li class="nav-item mt-auto">
                    <a class="nav-link text-white" href="#" @onclick="Logout">
                        <i class="bi bi-box-arrow-right me-2"></i> 退出登录
                    </a>
                </li>
            </ul>
        </div>

        <!-- 主内容区 -->
        <div class="col p-4">
            <!-- 标签页导航 -->
            <ul class="nav nav-tabs" id="mainTabs" role="tablist">
                @foreach (var tab in _openTabs)
                {
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(tab.Name == _activeTabId ? "active" : "")"
                        id="@tab.Name-tab"
                        @onclick="() => ActivateTab(tab.Name)"
                        type="button" role="tab">
                            @tab.Title
                            <span class="close-tab @(_openTabs.Count > 1 ? "" : "d-none")"
                            @onclick="() => CloseTab(tab.Name)"
                            @onclick:stopPropagation="true">✕</span>
                        </button>
                    </li>
                }
            </ul>

            <!-- 标签页内容 -->
            <div class="tab-content" id="mainTabContent">
                @foreach (var tab in _openTabs)
                {
                    <div class="tab-pane fade @(tab.Name == _activeTabId ? "show active" : "")"
                    id="@tab.Name-content" role="tabpanel">
                        @switch (tab.Name)
                        {
                            case nameof(Dashboard):
                                <Dashboard />
                                break;
                            case nameof(Resumes):
                                <Resumes />
                                break;
                            case nameof(Positions):
                                <Positions OnViewRecommendation="OnViewRecommendation" />
                                break;
                            case nameof(Recommendations):
                                <Recommendations PositionId="@tab.IntEntityId" />
                                break;
                            case nameof(Interviews):
                                <Interviews />
                                break;
                            case nameof(Communications):
                                <Communications />
                                break;
                            case nameof(Statistics):
                                <Statistics />
                                break;
                            case nameof(Customers):
                                <Customers />
                                break;
                            case nameof(Users):
                                <Users />
                                break;
                            default:
                                <h1 class="mb-4">@tab.Title</h1>
                                <p>@tab.Title 内容待开发...</p>
                                break;
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string _currentPage = nameof(Dashboard);
    private string _activeTabId = nameof(Dashboard);
    private List<TabItem> _openTabs = new List<TabItem>();
    private string? _currentUserName;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // 获取当前用户
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            _currentUserName = user.Identity.Name;
        }
        else
        {
            _currentUserName = "未登录用户";
        }

        ChangePage(nameof(Dashboard), "数据看板");
    }

    public void ChangePage(string pageName, string pageTitle, object? eneityId = null)
    {
        _currentPage = pageName;

        // 检查标签页是否已经打开
        var existingTab = _openTabs.FirstOrDefault(t => t.Name == pageName);
        if (existingTab == null)
        {
            // 如果标签页不存在，添加新标签页
            _openTabs.Add(new TabItem { Name = pageName, Title = pageTitle, EntityId = eneityId });
        }
        else
        {
            // 如果标签页已经打开，更新标题和实体ID
            existingTab.Title = pageTitle;
            existingTab.EntityId = eneityId;
        }

        // 激活对应的标签页
        ActivateTab(pageName);
    }

    private void ActivateTab(string tabName)
    {
        _activeTabId = tabName;
    }

    private void CloseTab(string tabName)
    {
        // 使用@onclick:stopPropagation="true"已经处理了事件冒泡问题

        if (_openTabs.Count > 1)
        {
            int index = _openTabs.FindIndex(t => t.Name == tabName);
            _openTabs.RemoveAt(index);

            // 如果关闭的是当前激活的标签页，则激活其他标签页
            if (tabName == _activeTabId)
            {
                int newIndex = Math.Min(index, _openTabs.Count - 1);
                _activeTabId = _openTabs[newIndex].Name;
            }
        }
    }

    private void OnViewRecommendation(int positionId)
    {
        Console.WriteLine("OnViewRecommendation: {0}", positionId);
        ChangePage(nameof(Recommendations), "人才推荐", positionId);
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/Account/Logout", forceLoad: true);
    }

    private class TabItem
    {
        public required string Name { get; set; }
        public required string Title { get; set; }
        public object? EntityId { get; set; }
        public int? IntEntityId => EntityId != null ? Convert.ToInt32(EntityId) : null;
    }
}