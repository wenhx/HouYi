@inject ICustomerService CustomerService

<div class="container-fluid">
    <!-- 主内容区 -->
    <div class="p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>客户管理</h1>
            <button class="btn btn-primary" @onclick="OpenAddModal">
                <i class="bi bi-plus-circle me-1"></i> 添加客户
            </button>
        </div>

        <!-- 搜索 -->
        <div class="row mb-4">
            <div class="col-md-8">
                <form class="search-form" @onsubmit="SearchCustomers" @onsubmit:preventDefault>
                    <div class="d-flex">
                        <input type="search" class="form-control" placeholder="搜索客户名称、联系人、电话、邮箱或地址..." aria-label="搜索" @bind="searchTerm" @bind:event="oninput">
                        <button class="btn btn-primary btn-search" type="submit">
                            <i class="bi bi-search me-1"></i>搜索
                        </button>
                        @if (isSearchMode && !string.IsNullOrEmpty(searchTerm))
                        {
                            <button class="btn btn-outline-secondary ms-2" @onclick:preventDefault @onclick="ClearSearch" style="min-width: 100px;">
                                <i class="bi bi-x-circle me-1"></i>清除
                            </button>
                        }
                    </div>
                </form>
            </div>
        </div>

        <!-- 客户列表 -->
        <div class="card">
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @errorMessage
                        <button type="button" class="btn-close" @onclick="ClearErrorMessage"></button>
                    </div>
                }
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th data-sortable="true" class="sorting">ID</th>
                                <th data-sortable="true" class="sorting">客户名称</th>
                                <th data-sortable="true" class="sorting">联系人</th>
                                <th data-sortable="true" class="sorting">联系电话</th>
                                <th data-sortable="true" class="sorting">邮箱</th>
                                <th data-sortable="true" class="sorting">地址</th>
                                <th data-sortable="true" class="sorting">更新时间</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="customerTableBody">
                            @if (pagedCustomers == null)
                            {
                                <tr>
                                    <td colspan="8" class="text-center">加载中...</td>
                                </tr>
                            }
                            else if (!pagedCustomers.Items.Any())
                            {
                                <tr>
                                    <td colspan="8" class="text-center">没有客户数据</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var customer in pagedCustomers.Items)
                                {
                                    <tr>
                                        <td>@customer.Id</td>
                                        <td>@customer.Name</td>
                                        <td>@customer.ContactPerson</td>
                                        <td>@customer.Phone</td>
                                        <td>@customer.Email</td>
                                        <td>@customer.Address</td>
                                        <td>@customer.UpdatedAt.ToString("yyyy-MM-dd")</td>
                                        <td>
                                            <div class="btn-group">
                                                <button type="button" title="查看详情" class="btn btn-sm btn-outline-primary btn-view btn-operation" data-id="@customer.Id" @onclick="() => ShowCustomerDetails(customer)" data-bs-toggle="modal" data-bs-target="#viewModal">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button type="button" title="编辑" class="btn btn-sm btn-outline-success btn-edit btn-operation" data-id="@customer.Id" @onclick="() => ShowEditModal(customer)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button type="button" title="删除" class="btn btn-sm btn-outline-danger btn-delete btn-operation" @onclick="() => ShowDeleteModal(customer)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <!-- 分页 -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="d-flex align-items-center">
                        <span class="me-2">每页显示：</span>
                        <select class="form-select me-2" @onchange="PageSizeChanged" style="width: 70px;">
                            <option value="10" selected="@(pageSize == 10)">10</option>
                            <option value="20" selected="@(pageSize == 20)">20</option>
                            <option value="50" selected="@(pageSize == 50)">50</option>
                        </select>
                        @if (pagedCustomers != null)
                        {
                            <span class="pagination-info">
                                显示 @((pagedCustomers.PageNumber - 1) * pagedCustomers.PageSize + 1)-@(Math.Min(pagedCustomers.PageNumber * pagedCustomers.PageSize, pagedCustomers.TotalCount)) 条，
                                共 @pagedCustomers.TotalCount 条记录
                            </span>
                        }
                    </div>
                    @if (pagedCustomers != null && pagedCustomers.TotalPages > 0)
                    {
                        <ul class="pagination mb-0">
                            <li class="page-item @(pagedCustomers.PageNumber == 1 ? "disabled" : "")">
                                <a class="page-link" href="javascript:void(0)" @onclick="() => NavigateToPage(1)">首页</a>
                            </li>
                            <li class="page-item @(!pagedCustomers.HasPreviousPage ? "disabled" : "")">
                                <a class="page-link" href="javascript:void(0)" @onclick="() => NavigateToPage(pagedCustomers.PageNumber - 1)">上一页</a>
                            </li>

                            @{
                                int startPage = Math.Max(1, pagedCustomers.PageNumber - 2);
                                int endPage = Math.Min(pagedCustomers.TotalPages, startPage + 4);

                                if (endPage - startPage < 4 && startPage > 1)
                                {
                                    startPage = Math.Max(1, endPage - 4);
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                int pageNumber = i;
                                <li class="page-item @(pageNumber == pagedCustomers.PageNumber ? "active" : "")">
                                    <a class="page-link" href="javascript:void(0)" @onclick="() => NavigateToPage(pageNumber)">@pageNumber</a>
                                </li>
                            }

                            <li class="page-item @(!pagedCustomers.HasNextPage ? "disabled" : "")">
                                <a class="page-link" href="javascript:void(0)" @onclick="() => NavigateToPage(pagedCustomers.PageNumber + 1)">下一页</a>
                            </li>
                            <li class="page-item @(pagedCustomers.PageNumber == pagedCustomers.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="javascript:void(0)" @onclick="() => NavigateToPage(pagedCustomers.TotalPages)">末页</a>
                            </li>
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<DeleteConfirmationModal ShowModal="@showDeleteModal" ItemName="@selectedCustomerName" OnConfirm="@HandleDeleteConfirmation" />

<!-- 客户详情模态框 -->
@if (showViewModal)
{
    <div class="modal fade show" style="display: block; padding-right: 17px;" id="viewModal" tabindex="-1" aria-labelledby="viewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewModalLabel">客户详情</h5>
                    <button type="button" class="btn-close" @onclick="CloseViewModal"></button>
                </div>
                <div class="modal-body">
                    @if (selectedCustomer != null)
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">客户名称</label>
                                <p>@selectedCustomer.Name</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">联系人</label>
                                <p>@selectedCustomer.ContactPerson</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">联系电话</label>
                                <p>@selectedCustomer.Phone</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">邮箱</label>
                                <p>@selectedCustomer.Email</p>
                            </div>
                            <div class="col-12 mb-3">
                                <label class="form-label fw-bold">地址</label>
                                <p>@selectedCustomer.Address</p>
                            </div>
                            <div class="col-12 mb-3">
                                <label class="form-label fw-bold">备注</label>
                                <p>@(string.IsNullOrEmpty(selectedCustomer.Description) ? "无" : selectedCustomer.Description)</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">创建时间</label>
                                <p>@selectedCustomer.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">更新时间</label>
                                <p>@selectedCustomer.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseViewModal">关闭</button>
                    <button type="button" class="btn btn-primary" @onclick="SwitchToEditMode">编辑</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- 编辑客户模态框 -->
<CustomerEditForm ModalId="editModal" ModalTitle="@($"编辑客户 - {editCustomer?.Name ?? "未知"}")" Customer="@editCustomer"
                OnCancel="CloseEditModal" OnValidSubmit="UpdateCustomer" ShowModal="@(editCustomer != null)" />

<!-- 添加客户模态框 -->
<CustomerEditForm ModalId="addModal" ModalTitle="添加客户" Customer="@newCustomer"
                OnCancel="CloseAddModal" OnValidSubmit="AddCustomer" ShowModal="@(newCustomer != null)" />

@code {
    private PagedResult<Customer>? pagedCustomers;
    private string? errorMessage;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";
    private bool isSearchMode = false;
    private bool showDeleteModal;
    private bool showViewModal;
    private string? selectedCustomerName;
    private int? customerIdToDelete;
    private Customer? selectedCustomer;
    private bool showEditModal;
    private Customer? editCustomer;
    private Customer? newCustomer;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomersAsync();
    }

    private async Task LoadCustomersAsync()
    {
        try
        {
            if (isSearchMode && !string.IsNullOrWhiteSpace(searchTerm))
            {
                Console.WriteLine($"开始搜索：{searchTerm}。");
                pagedCustomers = await CustomerService.FindCustomersAsync(searchTerm, currentPage, pageSize);
            }
            else
            {
                Console.WriteLine($"开始加载列表数据。");
                pagedCustomers = await CustomerService.GetCustomersAsync(currentPage, pageSize);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"加载客户数据时发生错误: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task NavigateToPage(int page)
    {
        currentPage = page;
        await LoadCustomersAsync();
    }

    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1; // 切换每页显示数量时重置到第一页
            await LoadCustomersAsync();
        }
    }

    private async Task SearchCustomers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await ClearSearch();
            return;
        }

        isSearchMode = true;
        currentPage = 1; // 搜索时重置到第一页
        await LoadCustomersAsync();
    }

    private async Task ClearSearch()
    {
        searchTerm = "";
        isSearchMode = false;
        currentPage = 1;
        await LoadCustomersAsync();
    }

    private async Task HandleDeleteConfirmation(bool confirmed)
    {
        if (confirmed && customerIdToDelete.HasValue)
        {
            try
            {
                await CustomerService.DeleteCustomerAsync(customerIdToDelete.Value);
                await LoadCustomersAsync();
            }
            catch (Exception ex)
            {
                errorMessage = $"删除客户时发生错误: {ex.Message}";
                Console.WriteLine(errorMessage);
            }
        }
        showDeleteModal = false;
        customerIdToDelete = null;
        selectedCustomerName = null;
    }

    private void ShowDeleteModal(Customer customer)
    {
        customerIdToDelete = customer.Id;
        selectedCustomerName = customer.Name;
        showDeleteModal = true;
    }

    private void ClearErrorMessage()
    {
        errorMessage = null;
    }

    private void ShowCustomerDetails(Customer customer)
    {
        selectedCustomer = customer;
        showViewModal = true;
        StateHasChanged();
    }

    private void CloseViewModal()
    {
        showViewModal = false;
        selectedCustomer = null;
        StateHasChanged();
    }

    private void OpenAddModal()
    {
        newCustomer = new Customer();
        StateHasChanged();
    }

    private void CloseAddModal()
    {
        newCustomer = null;
        StateHasChanged();
    }

    private async Task AddCustomer()
    {
        try
        {
            await CustomerService.CreateCustomerAsync(newCustomer);
            await LoadCustomersAsync();
            CloseAddModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"添加客户时发生错误: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private void ShowEditModal(Customer customer)
    {
        editCustomer = new Customer
        {
            Id = customer.Id,
            Name = customer.Name,
            ContactPerson = customer.ContactPerson,
            Phone = customer.Phone,
            Email = customer.Email,
            Address = customer.Address,
            Description = customer.Description
        };
        showEditModal = true;
        StateHasChanged();
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editCustomer = null;
        StateHasChanged();
    }

    private async Task UpdateCustomer()
    {
        if (editCustomer != null)
        {
            try
            {
                await CustomerService.UpdateCustomerAsync(editCustomer);
                await LoadCustomersAsync();
                CloseEditModal();
            }
            catch (Exception ex)
            {
                errorMessage = $"更新客户信息时发生错误: {ex.Message}";
                Console.WriteLine(errorMessage);
            }
        }
    }

    private void SwitchToEditMode()
    {
        if (selectedCustomer != null)
        {
            editCustomer = new Customer
            {
                Id = selectedCustomer.Id,
                Name = selectedCustomer.Name,
                ContactPerson = selectedCustomer.ContactPerson,
                Phone = selectedCustomer.Phone,
                Email = selectedCustomer.Email,
                Address = selectedCustomer.Address,
                Description = selectedCustomer.Description
            };
            showViewModal = false;
            showEditModal = true;
            StateHasChanged();
        }
    }
}
