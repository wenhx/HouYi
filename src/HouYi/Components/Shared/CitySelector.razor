@namespace HouYi.Components.Shared
@inject IPlaceService PlaceService

@if (_showModal)
{
    <div class="modal fade show" style="display: block; padding-right: 17px; z-index: 10500;" tabindex="-1" aria-labelledby="citySelectorModalLabel" aria-hidden="false">
        <div class="modal-dialog modal-dialog-centered" style="max-height: 80vh; margin: 1.75rem auto;">
            <div class="modal-content" style="max-height: 80vh;">
                <div class="modal-header">
                    <h5 class="modal-title" id="citySelectorModalLabel">选择城市</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body" style="overflow: hidden;">
                    <div class="row" style="height: 60vh;">
                        <div class="col-md-6" style="height: 100%; overflow-y: auto;">
                            <div class="list-group">
                                <div class="list-group-item list-group-item-action @(_selectedProvince == null ? "active" : "")"
                                     style="cursor: pointer; user-select: none;"
                                     @onclick="() => SelectProvince(null)">
                                    所有省份
                                </div>
                                @foreach (var province in _provinces)
                                {
                                    <div class="list-group-item list-group-item-action @(_selectedProvince?.Id == province.Id ? "active" : "")"
                                         style="cursor: pointer; user-select: none;"
                                         @onclick="() => SelectProvince(province)">
                                        @province.Name
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6" style="height: 100%; overflow-y: auto;">
                            <div class="list-group">
                                @if (_selectedProvince == null)
                                {
                                    <div class="list-group-item">请选择省份</div>
                                }
                                else
                                {
                                    @foreach (var city in _cities)
                                    {
                                        <div class="list-group-item list-group-item-action @(_selectedCity?.Id == city.Id ? "active" : "")"
                                             style="cursor: pointer; user-select: none;"
                                             @onclick="() => SelectCity(city)">
                                            @city.Name
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">取消</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmSelection">确定</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" style="z-index: 10400;"></div>
}

@code {
    [Parameter]
    public EventCallback<Place> OnCitySelected { get; set; }

    private IReadOnlyCollection<Place> _provinces = Array.Empty<Place>();
    private IList<Place> _cities = Array.Empty<Place>();
    private Place? _selectedProvince;
    private Place? _selectedCity;
    private bool _showModal;

    private async Task LoadProvincesAsync()
    {
        _provinces = await PlaceService.GetChineseProvincesAsync();
    }

    private async Task LoadCitiesAsync(short provinceId)
    {
        _cities = new List<Place>(await PlaceService.GetCitiesOfProvinceAsync(provinceId));
    }

    private async Task SelectProvince(Place? province)
    {
        if (province != null)
        {
            await LoadCitiesAsync(province.Id);
        }
        else
        {
            _cities.Clear();
        }
        _selectedProvince = province;
        _selectedCity = null;
        StateHasChanged();
    }

    private void SelectCity(Place city)
    {
        _selectedCity = city;
        StateHasChanged();
    }

    private async Task ConfirmSelection()
    {
        if (_selectedCity != null)
        {
            await OnCitySelected.InvokeAsync(_selectedCity);
        }
        CloseModal();
    }

    public async Task Show()
    {
        await LoadProvincesAsync();
        _showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        _showModal = false;
        _selectedProvince = null;
        _selectedCity = null;
        _cities.Clear();
        StateHasChanged();
    }
} 